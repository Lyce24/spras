import warnings
from pathlib import Path

import pandas as pd

from src.prm import PRM
from src.util import add_rank_column, prepare_volume, run_container

__all__ = ['RWR']

class RWR(PRM):
    # we need edges (weighted), source set (with prizes), and target set (with prizes).
    required_inputs = ['edges', 'sources', 'targets']

    @staticmethod
    def generate_inputs(data, filename_map):
        """
        Access fields from the dataset and write the required input files
        @param data: dataset
        @param filename_map: a dict mapping file types in the required_inputs to the filename for that type
        """
        # ensures the required input are within the filename_map
        for input_type in RWR.required_inputs:
            if input_type not in filename_map:
                raise ValueError(f"{input_type} filename is missing")

        # will take the sources and write them to files, and repeats with targets
        for node_type in ['sources', 'targets']:
            nodes = data.request_node_columns([node_type])
            # check if the nodes have prizes or not
            if data.contains_node_columns('prize'):
                node_df = data.request_node_columns(['prize'])
                nodes = pd.merge(nodes, node_df, on='NODEID')
                # creates with the node type without headers
                nodes.to_csv(filename_map[node_type], index=False, sep= "\t", columns=['NODEID', 'prize'])
            else:
                #If there aren't prizes but are sources and targets, make prizes based on them
                nodes = data.request_node_columns([node_type])
                # make all nodes have a prize of 1
                nodes['prize'] = 1.0
                # creates with the node type without headers
                nodes.to_csv(filename_map[node_type], index=False, sep= "\t", columns=['NODEID', 'prize'])

        # create the network of edges
        edges = data.get_interactome()

        # creates the edges files that contains the head and tail nodes and the weights after them
        edges.to_csv(filename_map['edges'], sep="\t", index=False, columns=["Interactor1","Interactor2","Weight"])


    # Skips parameter validation step
    @staticmethod
    def run(edges=None, sources=None, targets = None, output_file = None, df : float = 0.85, w : float = 0.00, f : str = 'min' , threshold : float = 0.0001, singularity=False):
        """
        Run RandomWalk with Docker
        @param nodetypes:  input node types with sources and targets (required)
        @param network:  input network file (required)
        @param output_file: path to the output pathway file (required)
        @param df: damping factor for restarting (default 0.85) (optional)
        @param w: lower bound to filter the edges based on the edge confidence (default 0.00) (optional)
        @param f: selection function (default 'min') (optional)
        @param threshold: threshold for constructing the final pathway (default 0.0001) (optional)
        @param singularity: if True, run using the Singularity container instead of the Docker container
        """

        if not edges or not sources or not targets or not output_file:
            raise ValueError('Required RWR arguments are missing')

        work_dir = '/spras'

        # Each volume is a tuple (src, dest) - data generated by Docker
        volumes = list()

        bind_path, edges_file = prepare_volume(edges, work_dir)
        volumes.append(bind_path)

        bind_path, sources_file = prepare_volume(sources, work_dir)
        volumes.append(bind_path)

        bind_path, targets_file = prepare_volume(targets, work_dir)
        volumes.append(bind_path)


        out_dir = Path(output_file).parent
        
        # RWR requires that the output directory exist
        out_dir.mkdir(parents=True, exist_ok=True)
        bind_path, mapped_out_dir = prepare_volume(str(out_dir), work_dir)
        volumes.append(bind_path)
        mapped_out_prefix= mapped_out_dir + '/out'  # Use posix path inside the container


        command = ['python',
                   '/RWR/random_walk.py',
                   '--edges_file', edges_file,
                   '--sources_file', sources_file,
                   '--targets_file', targets_file,
                   '--damping_factor', str(df),
                   '--selection_function', f,
                   '--w', str(w),
                   '--threshold', str(threshold),
                   '--output_file', mapped_out_prefix]

        print('Running RWR with arguments: {}'.format(' '.join(command)), flush=True)


        container_framework = 'singularity' if singularity else 'docker'
        out = run_container(container_framework,
                            'reedcompbio/random-walk-with-restart',
                            command,
                            volumes,
                            work_dir)
        print(out)

        output = Path(out_dir, 'out')
        output.rename(output_file)


    @staticmethod
    def parse_output(raw_pathway_file, standardized_pathway_file):
        """
        Convert a predicted pathway into the universal format
        @param raw_pathway_file: pathway file produced by an algorithm's run function
        @param standardized_pathway_file: the same pathway written in the universal format
        """

        df = pd.read_csv(raw_pathway_file, sep="\t")

        pathway_output_file = standardized_pathway_file
        edge_output_file = standardized_pathway_file.replace('.txt', '') + '_edges.txt'
        node_output_file = standardized_pathway_file.replace('.txt', '') + '_nodes.txt'

        # get all rows where type is 1
        df_edge = df.loc[df["Type"] == 1]

        # get rid of the placeholder column and output it to a file
        df_edge = df_edge.drop(columns=['Placeholder'])
        df_edge = df_edge.drop(columns=['Type'])
        df_edge.to_csv(edge_output_file, sep="\t", index=False, header=True)

        # locate the first place where placeholder is not Nan
        df_node = df.loc[df['Type'] == 2]
        # rename the header to Node, Pr, R_Pr, Final_Pr
        df_node = df_node.drop(columns=['Type'])
        df_node = df_node.rename(columns={'Node1': 'Node', 'Node2': 'Pr', 'Weight': 'R_Pr', 'Placeholder': 'Final_Pr'})
        df_node.to_csv(node_output_file, sep="\t", index=False, header=True)

        df_pathway = df.loc[df['Type'] == 3]
        df_pathway = df_pathway.drop(columns=['Placeholder'])
        df_pathway = df_pathway.drop(columns=['Type'])
        df_pathway = df_pathway.drop(columns=['Weight'])
        # add a colum of 1 to represent the rank
        df_pathway = add_rank_column(df_pathway)
        df_pathway.to_csv(pathway_output_file, sep="\t", index=False, header=False)
